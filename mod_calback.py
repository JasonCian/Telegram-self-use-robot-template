########################################################################################################################################################################################################
#   导入阶段
########################################################################################################################################################################################################
from utils import *  # 导入项目共用库
from mod_mdb import *  # 导入数据库模块中的指令
from mod_config import *  # 导入配置模块中加载的全局变量
from mod_warp import *  # 导入装饰器函数
from telegram import (Update,  # tg机器人更新相关，用于更新机器人收到的消息
                      InlineKeyboardButton,  # 内联键盘
                      InlineKeyboardMarkup,  # 内联键盘markdown格式
                      )
from telegram.ext import (ContextTypes,  # 文本格式相关，大小写
                          ConversationHandler,  # 对话相关
                          BasePersistence,  # 持久化存储相关，使用第三方存储
                          )
########################################################################################################################################################################################################
#   机器人消息处理机制
########################################################################################################################################################################################################
callback_logger = logging.getLogger(__name__)
#文字匹配
async def message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    SaveUserMessage(update, "机器人处理了一条普通文字信息")
    callback_logger.debug("机器人处理了一条普通文字信息")

#图片匹配
async def photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    SaveUserPhoto(update, "机器人处理了一条普通图片信息")
    callback_logger.debug("机器人处理了一条普通图片信息")